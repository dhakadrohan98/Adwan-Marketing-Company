Company account 

Working:
1. Get module configs [Authorization: Bearer {{admin_token}}]
{
  storeConfig {
    company_account_enable
    company_account_email_sender
    company_account_ca_approval
    company_account_send_approval_copy_to
    company_account_ca_remove
    company_account_send_remove_copy_to
    company_account_subuser_welcome
    company_account_subuser_remove
    company_account_subuser_reset_password
  }
}



2. Add information on whether or not its a company account and information of salesrep users [Authorization: Bearer {{customer_token}}]
{
  customer {
    email
    firstname
    lastname
    bss_is_company_account
    salesrep {
      email
      username
      is_active
      firstname
      lastname
      user_id   
    }
  }
}

3. Assign customer to Company Account  [Authorization: Bearer {{admin_token}}]

mutation($customer_id: Int!, $is_company_account: Int!) {
  bssUpdateToCompanyAccount(customer_id: $customer_id, is_company_account: $is_company_account ) {
    firstname
    lastname
    email
    bss_is_company_account
  }
}

variable:
{
        "customer_id":48,
        "is_company_account":1
}
Note: We are not using this query becuase the admin will approve the customer for company account.If client need this if customer can do by them self then we need to integrate it. 


4. Add information of the list ofsub-user and role in query of customer [Authorization: Bearer {{customer_token}}]
{
  customer {
    email
    firstname
    lastname
    bss_is_company_account
    salesrep {
      email
      username
      is_active
      firstname
      lastname
      user_id   
    }
    sub_users {
      sub_id
      sub_name
      sub_email
      role_id
      role {
        role_name
        customer_id
        max_order_amount
        order_per_day
        role_id
        role_type
      }
      created_at
      quote_id
      customer_id
      customer {
        firstname
        lastname
        email
        date_of_birth
        default_billing
        default_shipping
        bss_is_company_account
        wishlists {
          items_count
          updated_at
        }
        created_at
        allow_remote_shopping_assistance
      }
    }
    sub_roles {
      role_id
      role_name
      role_type
      customer_id
      order_per_day
      max_order_amount
      customer {
        email,
        addresses {
          firstname
          country_code
          telephone
        }
        created_at
        lastname
      }
    }
  }
}

5. Get information from one role [Authorization: Bearer {{customer_token}}]

query($role_id: Int!){
  bssCompanyAccountGetRole(role_id: $role_id) {
    role_name
    role_id
    role_type
    customer_id
    customer {
      email
      firstname
    }
  }
}
Variable:
{
        "role_id":9
}


6. Create or edit 1 role (add subuser token in bearrier token) [Authorization: Bearer {{customer_token}}]
mutation {
  bssCompanyAccountSaveRole(
    input: {
      role_id: 23
      role_type: "1,2,3,4,5,6"
      max_order_amount: 99
      role_name: "Full"
      customer_id:12
    }
  ) {
    role_name
    role_id
    role_type
    max_order_amount
    customer_id
    customer {
      firstname
      date_of_birth
    }
  }
}

7. Delete 1 role [Authorization: Bearer {{customer_token}}]

mutation($role_id: Int!) {
  bssCompanyAccountDeleteRole(role_id: $role_id)
}

variable:
{
  "role_id":23
}

8. Get information of sub-user who are login [Authorization: Bearer {{subuser_token}}]
{
  bssSubUser {
    role {
      role_name
      role_type
    }
    sub_name
    sub_email
    customer {
      bss_is_company_account
      email
      firstname
    }
  }
}


9. Get information of sub-user by id [Authorization: Bearer {{customer_token|admin_token|subuser_token}}]
query($sub_id: Int!){
  bssCompanyAccountGetSubUser(sub_id: $sub_id) {
    sub_id
    sub_email
    sub_id
    role
    {
      role_name
      role_type
      customer {
        email
        firstname
      }
    }
  }
}

variable:
{
  "$sub_id": 3
}


10. Delete 1 sub-user [Authorization: Bearer {{customer_token|admin_token|subuser_token}}]
mutation($sub_id :Int!) {
  bssCompanyAccountDeleteSubUser(sub_id: $sub_id)
}

Variable:
{
  "$sub_id": 26
}

11. Get list of user under same 1 role  [Authorization: Bearer {{customer_token|admin_token|subuser_token}}]
query($role_id :Int!){
  bssCompanyAccountGetSubUsersByRole(role_id: $role_id) {
    sub_status
    sub_email
    sub_name
    customer_id
    customer {
      email
      firstname
    }
  }
}
 
variable:
{
  "$role_id": 0
}

12.Generate sub-user token
mutation {
  bssGenerateSubUserToken(
    email: ""goneyi8803@pigicorn.com""
    password: ""********""
  ) {
    token
  }
}


13. Revoke sub-user token [Authorization: Bearer {{subuser_token}}]
mutation {
  bssRevokeSubUserToken {
    result
  }
}
